//n的阶乘  
int Facl(int n)
{
    //普通
    /*int i = 0;
    int ret = 1;
    for (i=1; i<=n; i++) {
    ret *= i;
    }
    return ret;*/
    //递归    
    if (n<=1) {
    return 1;
    }else {
    return n*Facl(n-1);
    }
}

/*int main()
{
    int n = 0;
    int ret = 0;
    scanf("%d",&n);
    ret = Facl(n);
    printf("%d\n", ret);
    return 0;

}*/

//求第n个斐波那契数
//1 1 2 3 5 8 13 21 34。。0
//递归
int count = 0;
int Fib(int n)
{
    if (n==3) {//测试第三个计算次数
    count++;
    }
    if (n<=2) {
    return 1;
    }else {
    return Fib(n-2)+Fib(n-1);
    }
}
//非递归
int fib(int n)
{
    int a = 1;
    int b = 1;
    int c = 1;
    while(n>2){
    c = a+b;
    a = b;
    b = c;
    n--;
    }
    return c;
}
int main()
{
    int n = 0;
    int ret = 0;
    scanf("%d",&n);
    ret = fib(n);
    printf("%d\n", ret);
    //printf("%d\n", count);
    return 0;

}
